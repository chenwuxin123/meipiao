<?xml version="1.0" encoding="UTF-8"?>
<configuration debug="true" scan="true" scanPeriod="1 seconds">
    <property name="FILTER_LEVEL" value="DEBUG"/>
    <contextName>logback</contextName>
    <!--ConsoleAppender 用于在屏幕上输出日志-->
    <appender name="stdout" class="ch.qos.logback.core.ConsoleAppender">
        <!--定义了一个过滤器,在LEVEL之下的日志输出不会被打印出来-->
        <!--这里定义了DEBUG，也就是控制台不会输出比ERROR级别小的日志-->
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>${FILTER_LEVEL}</level>
        </filter>
        <!-- encoder 默认配置为PatternLayoutEncoder -->
        <!--定义控制台输出格式-->
        <encoder>
            <pattern>%magenta(%d) [%cyan(%thread)][%highlight(%level)][%red(%logger{50})][%green(%file:%line)]\n\t%msg%n
            </pattern>
        </encoder>
    </appender>

<!--    <appender name="file" class="ch.qos.logback.core.rolling.RollingFileAppender">-->
<!--        &lt;!&ndash;定义日志输出的路径&ndash;&gt;-->
<!--        &lt;!&ndash;这里的scheduler.manager.server.home 没有在上面的配置中设定，所以会使用java启动时配置的值&ndash;&gt;-->
<!--        &lt;!&ndash;比如通过 java -Dscheduler.manager.server.home=/path/to XXXX 配置该属性&ndash;&gt;-->
<!--        <file>${CATALINA_LOG}/log.log</file>-->
<!--        &lt;!&ndash;定义日志滚动的策略&ndash;&gt;-->
<!--        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">-->
<!--            &lt;!&ndash;定义文件滚动时的文件名的格式&ndash;&gt;-->
<!--            <fileNamePattern>${CATALINA_LOG}/log.%d{yyyy-MM-dd.HH}.log.gz-->
<!--            </fileNamePattern>-->
<!--            &lt;!&ndash;60天的时间周期，日志量最大20GB&ndash;&gt;-->
<!--            <maxHistory>60</maxHistory>-->
<!--            &lt;!&ndash; 该属性在 1.1.6版本后 才开始支持&ndash;&gt;-->
<!--            <totalSizeCap>20GB</totalSizeCap>-->
<!--        </rollingPolicy>-->
<!--        <triggeringPolicy class="ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy">-->
<!--            &lt;!&ndash;每个日志文件最大100MB&ndash;&gt;-->
<!--            <maxFileSize>100MB</maxFileSize>-->
<!--        </triggeringPolicy>-->
<!--        &lt;!&ndash;定义输出格式&ndash;&gt;-->
<!--        <encoder>-->
<!--            <pattern>%d [%thread][%level][%logger{50}][%file:%line]\n\t%msg%n</pattern>-->
<!--        </encoder>-->
<!--    </appender>-->

    <!--root是默认的logger 这里设定输出级别是debug-->
    <root level="info">
        <!--定义了两个appender，日志会通过往这两个appender里面写-->
        <appender-ref ref="stdout"/>
<!--        <appender-ref ref="file"/>-->
    </root>
</configuration>